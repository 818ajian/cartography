/*
precision highp float;
uniform sampler2D a;
uniform float b;
varying vec2 c;
uniform float d;
float decodeElevation(in vec2 colorChannels){
    float decimalDecode=1.0;
    if(d>12.0){
        decimalDecode=0.01;
    }
    float elevationM=((colorChannels.x*255.0+(colorChannels.y*255.0)*256.0)-11000.0)*decimalDecode;
    if(elevationM>9000.0){
        elevationM=0.0;
    }
    return elevationM;
}
uniform sampler2D w;
uniform bool q;
uniform bool r;
uniform bool s;
vec4 getFragColor(in float CELLSIZE,in float absElevation,in vec2 texCoord){
    return texture2D(w,texCoord);
}
uniform vec3 j;
uniform float k;
uniform float l;
uniform float m;
const highp float CELLSIZE=0.00390625;
float rowToCell(in int row){
    float v=(float(row)*2.0+1.0)/512.0;
    return v;
}
void main(void){
    vec2 texCoord=c;
    bool atNorthBorder=texCoord.y<=CELLSIZE;
    bool atSouthBorder=texCoord.y>=1.0-CELLSIZE;
    bool atWestBorder=texCoord.x<=CELLSIZE;
    bool atEastBorder=texCoord.x>=1.0-CELLSIZE;
    if(d==12.0){
        if(atEastBorder){
            texCoord.x=texCoord.x-CELLSIZE;
        }
        if(atWestBorder){
            texCoord.x=texCoord.x+CELLSIZE;
        }
        if(atNorthBorder){
            texCoord.y=texCoord.y+CELLSIZE;
        }
        if(atSouthBorder){
            texCoord.y=texCoord.y-CELLSIZE;
        }
    }
    vec2 nRight=vec2(texCoord.x+CELLSIZE,texCoord.y);
    vec2 nLeft=vec2(texCoord.x-CELLSIZE,texCoord.y);
    vec2 nAbove=vec2(texCoord.x,texCoord.y+CELLSIZE);
    vec2 nBelow=vec2(texCoord.x,texCoord.y-CELLSIZE);
    float absElevation=decodeElevation(vec2(texture2D(a,texCoord.xy).xy));
    float neighborRight=decodeElevation(vec2(texture2D(a,nRight).xy));
    float neighborLeft=decodeElevation(vec2(texture2D(a,nLeft).xy));
    float neighborAbove=decodeElevation(vec2(texture2D(a,nAbove).xy));
    float neighborBelow=decodeElevation(vec2(texture2D(a,nBelow).xy));
    if(d!=12.0){
        if(atNorthBorder){
            float valA=texture2D(a,vec2(texCoord.x,rowToCell(256))).b;
            float valB=texture2D(a,vec2(texCoord.x,rowToCell(251))).b;
            neighborBelow=decodeElevation(vec2(valB,valA));
        }
        if(atSouthBorder){
            float valA=texture2D(a,vec2(texCoord.x,rowToCell(254))).b;
            float valB=texture2D(a,vec2(texCoord.x,rowToCell(250))).b;
            neighborAbove=decodeElevation(vec2(valB,valA));
        }
        if(atEastBorder){
            float valA=texture2D(a,vec2(texCoord.y,rowToCell(253))).b;
            float valB=texture2D(a,vec2(texCoord.y,rowToCell(249))).b;
            neighborRight=decodeElevation(vec2(valB,valA));
        }
        if(atWestBorder){
            float valA=texture2D(a,vec2(texCoord.y,rowToCell(252))).b;
            float valB=texture2D(a,vec2(texCoord.y,rowToCell(248))).b;
            neighborLeft=decodeElevation(vec2(valB,valA));
        }
    }
    vec4 fragColor=getFragColor(CELLSIZE,absElevation,texCoord);
    if(q){
        float exaggerationFactor=max(l*10.0,1.0);
        if(s&&absElevation<0.0){
            neighborAbove=decodeElevation(vec2(0.0,texture2D(a,nAbove).g));
        }
        vec3 normal=vec3(neighborLeft-neighborRight,neighborAbove-neighborBelow,CELLSIZE*b/exaggerationFactor);
        float hillShade=dot(normal,normalize(j))/length(normal);
        hillShade=clamp(m*1.0+(hillShade+1.0)*0.5,0.0,1.0);
        hillShade=pow(hillShade,1.0/(1.0+k*2.0));
        hillShade=max(hillShade,0.25);
        gl_FragColor=vec4(hillShade,hillShade,hillShade,1.0)*fragColor;
    }
    else{
        gl_FragColor=fragColor;
    }
    if(r){
        vec4 red=vec4(0.98,0.18,0.15,1.0);
        vec4 green=vec4(0.0,1.0,0.0,1.0);
        vec4 blue=vec4(0.0,0.0,1.0,1.0);
        vec4 black=vec4(0.0,0.0,0.0,1.0);
        vec4 lighten=vec4(1.2,1.2,1.2,1.0);
        if(atWestBorder){
            gl_FragColor=green;
        }
        if(atEastBorder){
            gl_FragColor=black;
        }
        if(atNorthBorder){
            gl_FragColor=red;
        }
        if(atSouthBorder){
            gl_FragColor=blue;
        }
        if(mod(texCoord.x,65.0*CELLSIZE)<CELLSIZE){
            gl_FragColor=gl_FragColor*lighten;
        }
        if(mod(texCoord.y,65.0*CELLSIZE)<CELLSIZE){
            gl_FragColor=gl_FragColor*lighten;
        }
    }
}
//*/


///////////////////////////////////////////////////////

/*
precision highp float;
uniform sampler2D a;
uniform float b;
varying vec2 c;
uniform float d;
float decodeElevation(in vec2 colorChannels){
    float decimalDecode=1.0;
    if(d>12.0){
        decimalDecode=0.01;
    }
    float elevationM=((colorChannels.x*255.0+(colorChannels.y*255.0)*256.0)-11000.0)*decimalDecode;
    if(elevationM>9000.0){
        elevationM=0.0;
    }
    return elevationM;
}
attribute vec2 e;
uniform vec2 f;
uniform vec2 g;
uniform vec4 h;
uniform float i;
//*/
